/**
 * The {@code SList} class represents a singly linked list that can hold
 * elements of a generic type {@code T}. It provides methods for adding elements
 * to the beginning and end of the list, adding elements at a specified index,
 * removing elements from the beginning and end of the list, removing elements
 * at a specified index, checking if the list is empty, obtaining the size of
 * the list, and searching for elements within the list.
 *
 * @param <T> The type of elements stored in the singly linked list.
 */
public class SList<T> {
	/**
	 * The number of elements currently stored in the singly linked list.
	 */
	int size;
	/**
	 * The reference to the first node in the singly linked list.
	 */
	SNode<T> first;
	/**
	 * The reference to the last node in the singly linked list.
	 */
	SNode<T> last;

	/**
	 * Constructs an empty singly linked list with size 0.
	 */
	SList() {
		size = 0;
		first = null;
		last = null;
	}

	/**
	 * Adds a new element to the beginning of the singly linked list.
	 *
	 * @param element The element to be added to the list.
	 */
	void addFirst(T element) {
		SNode<T> newNode = new SNode<T>(element); // Create a new node
		newNode.next = first; // Point the new node's next to the current first
		first = newNode; // Update the first reference to the new node
		if (last == null) // If the list was empty
			last = first; // Update last to point to the new node
		size++; // Increase the size of the list
		
	}

	/**
	 * Adds a new element to the end of the singly linked list.
	 *
	 * @param element The element to be added to the list.
	 */
	void addLast(T element) {
		// Ex.1 a) complete the method
		if(size == 0) // If the list is empty, delegate to addFirst
			addFirst(element); 
		else {
			SNode<T> newNode = new SNode<T>(element); // Create a new node
			last.next = newNode; // Link the last node to the new node
			last = newNode; // Update last to the new node
			}
		size++; // Increase the size of the list
		
		
	}

	/**
	 * Adds a new element at the specified index in the singly linked list. If the
	 * index is 0, the element is added to the beginning of the list. If the index
	 * is greater than or equal to the size, the element is added to the end of the
	 * list.
	 *
	 * @param index   The index at which to add the element.
	 * @param element The element to be added to the list.
	 */
	void addAtIndex(int index, T element) {
		// Ex.1 b) complete the method
		if(index < 0) // Handle invalid index
			return;
		else if(index == 0)
			addFirst(element); // Use addFirst for index 0
		else if(index >= size)
			addLast(element); // Use addLast for out-of-bounds index
		else {
			//Traverse
				SNode<T> current = first;  // Start at the first node 
				for(int i = 0; i < index - 1; i++) {  // Traverse to the node before the index
					current = current.next;
			}
			SNode<T> newNode = new SNode<T>(element); // Create new node
			newNode.next = current.next; // point new node the the next node
			current.next = newNode; // point previous node to the new node
			size++; // Increase the size of the list
		}
	}

	/**
	 * Removes and returns the first element from the singly linked list.
	 *
	 * @return The removed element, or {@code null} if the list is empty.
	 */
	T removeFirst() {
		if (size == 0) // Check if the list is empty
			return null;
		else {
			SNode<T> temp = first; // Temporarily store the first node
			first = first.next; // Update first to the next node
			size--; // Decrease the size
			if (first == null) // If the list becomes empty, update last to null
				last = null;
			return temp.element; // Return the removed element
		}

	}

	/**
	 * Removes and returns the last element from the singly linked list.
	 *
	 * @return The removed element, or {@code null} if the list is empty.
	 */
	T removeLast() {
		// Ex.2 complete the method
		if (size == 0) // Check if the list is empty
			return null;
		else {
			SNode<T> current = first; // Start from the first node
			while(current.next != last) { // Traverse to the node before the last
				current = current.next;
			}
			SNode<T> temp = last; // Temporarily store the last node
			last = current; // Update last to the second-to-last node
			current.next = null; // Remove the point to the last node
			size--; // Decrease the size
			if (first == null) // If the list becomes empty, update last to null
				last = null;
			return temp.element; // Return the removed element
		}

	}

	/**
	 * Removes and returns the element at the specified index in the singly linked
	 * list.
	 *
	 * @param index The index of the element to be removed.
	 * @return The removed element, or {@code null} if the index is out of bounds.
	 */
	T removeAtIndex(int index) {
		// Ex.3 complete the method
		if (index <= 0) 
			return removeFirst();
		else if(index >= size)
			return removeLast();
		else {
			SNode<T> current = first; // Start from the first node
			for(int i = 0; i< index - 1; i++) { // Traverse tp the node before the index
				current = current.next;
			}
			SNode<T> temp = current.next; // Temporarily store the node to be removed
			current.next = temp.next; // Bypass the removed node
			temp.next = null;
			size--; // Decrease the size
			return temp.element; // Return the removed element
			}
		
	}

	/**
	 * Checks whether the singly linked list is empty.
	 *
	 * @return {@code true} if the list is empty, {@code false} otherwise.
	 */
	boolean isEmpty() {
		if (size == 0)
			return true;
		else
			return false;
	}

	/**
	 * Returns the current size of the singly linked list.
	 *
	 * @return The number of elements in the list.
	 */
	int getSize() {
		return size;
	}

// Implement the reversal of the linked list
	// Ex. 4 complete the method
    void reverse() {
        SNode<T> previous = null; // Initialize previous node as null
        SNode<T> current = first; //start with the first node
        SNode<T> next = null; // Initialize next node as null
        while (current != null) { // Traverse the list
            next = current.next; // Store the next node	
            current.next =  previous ; // Reverse the link
            previous =  current; // Move previous to current
            current =  next; // Move current to next
        }
        first = previous; // Update first to the last processed node
    }
	
	/**
	 * Searches for the first occurrence of a specified item in the singly linked
	 * list and returns its index.
	 *
	 * @param item The item to search for.
	 * @return The index of the first occurrence of the item, or {@code -1} if not
	 *         found.
	 */
	int search(T item) {
		// Ex.5 complete the method
		SNode<T> current = first; //start with the first node 
		int i = 0; //starting first index
		while(i < size && current.element != item) { // Traverse the list
			current = current.next;
			i++;
			}
		if(i <= size-1 && current != null) // If the item was found
			return i;
		else { //if not found
			return -1;
		}
	}

	/**
	 * Prints the elements of the singly linked list horizontally, followed by a
	 * horizontal line separator. This method is primarily used for debugging and
	 * displaying the contents of the list.
	 */
	void printHorizontal() {
		SNode<T> walker = first; // Start from the first node
		for (int i = 0; i < size; i++) {  // Traverse the list
			System.out.print(walker.element); // Print the current element
			System.out.print(" ");  // Print a space
			walker = walker.next; // Move to the next node
		}
		System.out.println("\n-----");
	}



}
